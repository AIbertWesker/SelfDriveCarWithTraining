class NeuralNetwork {
    constructor(neuronCounts) {
        this.levels = [];
        for (let i = 0; i < neuronCounts.length - 1; i++) {
            this.levels.push(new Level(neuronCounts[i], neuronCounts[i + 1]));
        }
    }

    static feedForward(givenInputs, network) {
        let outputs = givenInputs.slice(); // Copy the inputs
        for (let i = 0; i < network.levels.length; i++) {
            outputs = Level.feedForward(outputs, network.levels[i]);
        }
        return outputs;
    }

    static train(inputs, targets, network, learningRate = 0.1) {
        const outputs = [];
        outputs[0] = inputs.slice();

        // Forward pass
        for (let i = 0; i < network.levels.length; i++) {
            outputs[i + 1] = Level.feedForward(outputs[i], network.levels[i]);
        }

        // Backward pass
        let errors = NeuralNetwork.calculateErrors(targets, outputs[outputs.length - 1]);
        for (let i = network.levels.length - 1; i >= 0; i--) {
            errors = Level.backpropagate(errors, network.levels[i], outputs[i]);
            NeuralNetwork.updateWeights(network.levels[i], outputs[i], errors, learningRate);
        }
    }

    static calculateErrors(targets, outputs) {
        const errors = new Array(targets.length);
        for (let i = 0; i < targets.length; i++) {
            errors[i] = targets[i] - outputs[i];
        }
        return errors;
    }

    static updateWeights(level, inputs, errors, learningRate) {
        for (let i = 0; i < level.outputs.length; i++) {
            for (let j = 0; j < level.inputs.length; j++) {
                level.weights[j][i] += learningRate * errors[i] * inputs[j];
            }
            level.biases[i] += learningRate * errors[i];
        }
    }
}

class Level {
    constructor(inputCount, outputCount) {
        this.inputs = new Array(inputCount);
        this.outputs = new Array(outputCount);
        this.biases = new Array(outputCount);

        this.weights = [];
        for (let i = 0; i < inputCount; i++) {
            this.weights[i] = new Array(outputCount);
        }

        Level.#randomize(this);
    }

    static #randomize(level) {
        for (let i = 0; i < level.inputs.length; i++) {
            for (let j = 0; j < level.outputs.length; j++) {
                level.weights[i][j] = Math.random() * 2 - 1;
            }
        }

        for (let i = 0; i < level.biases.length; i++) {
            level.biases[i] = Math.random() * 2 - 1;
        }
    }

    static feedForward(givenInputs, level) {
        for (let i = 0; i < level.inputs.length; i++) {
            level.inputs[i] = givenInputs[i];
        }

        for (let i = 0; i < level.outputs.length; i++) {
            let sum = 0;
            for (let j = 0; j < level.inputs.length; j++) {
                sum += level.inputs[j] * level.weights[j][i];
            }

            level.outputs[i] = Level.activationFunction(sum + level.biases[i]);
        }
        return level.outputs;
    }

    static backpropagate(errors, level, inputs) {
        const newErrors = new Array(level.inputs.length);

        for (let i = 0; i < level.inputs.length; i++) {
            let error = 0;
            for (let j = 0; j < level.outputs.length; j++) {
                error += errors[j] * level.weights[i][j];
            }
            newErrors[i] = error;
        }

        return newErrors;
    }

    static activationFunction(x) {
        // You can use a different activation function if needed
        return 1 / (1 + Math.exp(-x));
    }
}
